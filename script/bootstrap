#!/bin/bash
#
# bootstrap installs things.

DOTFILES_ROOT="`pwd`"

set -e

echo ''

info () {
  printf "  [ \033[00;34m..\033[0m ] $1"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

setup_gitconfig () {
  echo -n "Git email: "
  read gitemail
  git config --global user.email $gitemail
  success 'gitconfig'
}

link_files () {
  ln -s $1 $2
  success "linked $1 to $2"
}

install_dotfiles () {
  info 'installing dotfiles'

  overwrite_all=false
  backup_all=false
  skip_all=false

  for source in `find $DOTFILES_ROOT -maxdepth 2 -name \*.symlink`
  do
    dest="$HOME/.`basename \"${source%.*}\"`"

    if [ -f $dest ] || [ -d $dest ]
    then

      overwrite=false
      backup=false
      skip=false

      if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
      then
        user "File already exists: `basename $source`, what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi

      if [ "$overwrite" == "true" ] || [ "$overwrite_all" == "true" ]
      then
        rm -rf $dest
        success "removed $dest"
      fi

      if [ "$backup" == "true" ] || [ "$backup_all" == "true" ]
      then
        mv $dest $dest\.backup
        success "moved $dest to $dest.backup"
      fi

      if [ "$skip" == "false" ] && [ "$skip_all" == "false" ]
      then
        link_files $source $dest
      else
        success "skipped $source"
      fi

    else
      link_files $source $dest
    fi

  done
}

setup_gitconfig
install_dotfiles

# Install homebrew and OS X specific apps.
if [ $(uname) == "Darwin" ]; then
  if ! which brew >/dev/null; then
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  fi
  /usr/local/bin/brew update
  /usr/local/bin/brew upgrade
  /usr/local/bin/brew install git
  /usr/local/bin/brew install cask
  # Install applications
  brew cask install slack
  brew cask install iterm2
  brew cask install sublime-text
  brew cask install atom
  brew cask install spotify
  brew cask install sequel-pro
  brew cask install codekit
  brew cask install flux
  brew cask install dropbox
  brew cask install postman
  brew cask install acquia-dev
  brew cask install github
fi

# Install zsh syntax highlighting.
if [ ! -d ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting ]; then
  git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
fi

# Download Material design for iTerm2.
if [ ! -f ~/bin/material-design-colors.itermcolors ]; then
  cd ~/bin && wget https://raw.githubusercontent.com/MartinSeeler/iterm2-material-design/master/material-design-colors.itermcolors
fi

# Install Composer.
curl -Ss https://getcomposer.org/installer | php

if [ $(uname) == "Darwin" ]; then
  mv composer.phar /usr/local/bin/composer
  else sudo mv composer.phar /usr/local/bin/composer
fi

# Install Composer project dependencies.
composer global require hirak/prestissimo \
drush/config-extra \
pantheon-systems/terminus \
squizlabs/php_codesniffer \
dealerdirect/phpcodesniffer-composer-installer \
drupal/coder

# Run Composer global update.
composer global update

# Install Drush.
if [ $(uname) == "Darwin" ]
  then
    curl -OL https://github.com/drush-ops/drush-launcher/releases/download/0.6.0/drush.phar
    chmod +x drush.phar
    mv drush.phar /usr/local/bin/drush
  else
    wget -O drush.phar https://github.com/drush-ops/drush-launcher/releases/download/0.6.0/drush.phar
    chmod +x drush.phar
    sudo mv composer.phar /usr/local/bin/composer
fi

drush self-update

# Install Drupal Check
curl -O -L https://github.com/mglaman/drupal-check/releases/latest/download/drupal-check.phar
mv drupal-check.phar $HOME/bin/drupal-check
chmod +x $HOME/bin/drupal-check

# Install Drupal Console
curl https://drupalconsole.com/installer -L -o drupal.phar
mv drupal.phar /usr/local/bin/drupal
chmod +x /usr/local/bin/drupal
drupal init --override
drupal check

echo ''
echo '  All installed!'
